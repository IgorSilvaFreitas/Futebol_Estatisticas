library(readr)
base <- read_csv("df_full_premierleague.csv")
base2 <- base
base2 <- na.omit(base2)
##Criando variável resposta
library(dplyr)
base2$M_G <- NA
for(i in 1:length(base2$home_team)){
if(base2$goal_home_ft[i] > base2$goal_away_ft[i]){
base2$M_G[i] <- 1
}else if(base2$goal_home_ft[i] < base2$goal_away_ft[i]){
base2$M_G[i] <- 0
}else {base2$M_G[i] <- 2}
}
##Selecionando estatísticas do jogo
base2 <- base2[,c(9:25,27:32,115)]
#verificando normalidade das classes
base2 |>
filter(M_G == 0) |>
shapiro.qqnorm(home_corners)
#verificando normalidade das classes
base2 |>
filter(M_G == 0) |>
shapiro.test(home_corners)
#verificando normalidade das classes
base2 |>
filter(M_G == 0) |>
shapiro.test(base2home_corners)
#verificando normalidade das classes
base2 |>
filter(M_G == 0) |>
shapiro.test(base2$home_corners)
#verificando normalidade das classes
shapiro.test(base2$home_corners)
base = readr::read_csv2("base_saeb.csv")
t.test(fem$prof_mat, masc$prof_mat) #PODE CONSIDERAR IGUAL
fem = filter(base, sexo != "Masculino")
t.test(fem$prof_mat, masc$prof_mat) #PODE CONSIDERAR IGUAL
#####
#TESTES ESTATêSTICOS
masc = filter(base, sexo == "Masculino")
t.test(fem$prof_mat, masc$prof_mat) #PODE CONSIDERAR IGUAL
ks.test(base2$home_corners,"pnorm")
# bases para os testes de hipoteses
per <- base2 |> filter(M_G == 0)
gan <- base2 |> filter(M_G == 1)
emp <- base2 |> filter(M_G == 2)
#verificando normalidade das classes
shapiro.test(per$home_corners)
shapiro.test(gan$home_corners)
shapiro.test(emp$home_corners)
base2 |>
ggplot(mapping = aes(y = home_corners ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou"))))  +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Escanteios")+
theme_classic()
library(ggplot2)
base2 |>
ggplot(mapping = aes(y = home_corners ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou"))))  +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Escanteios")+
theme_classic()
#teste de igualdade de médias
t.test(per$home_corners, gan$home_corners)
t.test(per$home_corners, emp$home_corners) # médias podem ser consideradas diferentes
t.test(emp$home_corners, gan$home_corners) # médias podem ser consideradas diferentes
#verificando normalidade das classes
shapiro.test(per$home_clearances) #normal
shapiro.test(gan$home_clearances) #normal
shapiro.test(emp$home_clearances) #normal
base2 |>
ggplot(mapping = aes(y = home_clearances ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou")))) +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Chutões")+
theme_classic()
#teste de igualdade de médias
t.test(per$home_clearances, gan$home_clearances) # médias podem ser consideradas diferentes
t.test(per$home_clearances, emp$home_clearances) # médias podem ser consideradas diferentes
t.test(emp$home_clearances, gan$home_clearances) # médias não podem ser consideradas diferentes
base2 |>
ggplot(mapping = aes(y = home_fouls_conceded ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou"))))  +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Faltas cometidas")+
theme_classic()
#verificando normalidade das classes
shapiro.test(per$home_fouls_conceded) #normal
shapiro.test(gan$home_fouls_conceded) #normal
shapiro.test(emp$home_fouls_conceded) #normal
#teste de igualdade de médias
t.test(per$home_fouls_conceded, gan$home_fouls_conceded) # médias podem ser consideradas diferentes
t.test(per$home_fouls_conceded, emp$home_fouls_conceded) # médias podem ser consideradas diferentes
t.test(emp$home_fouls_conceded, gan$home_fouls_conceded) # médias não podem ser consideradas diferentes
t.test(emp$home_fouls_conceded, gan$home_fouls_conceded) # médias não podem ser consideradas diferentes
t.test(per$home_fouls_conceded, emp$home_fouls_conceded) # médias não podem ser consideradas diferentes
t.test(fem$prof_mat, masc$prof_mat) #PODE CONSIDERAR IGUAL
#teste de igualdade de médias
t.test(per$home_clearances, gan$home_clearances) # médias podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_corners, gan$home_corners) # médias não podem ser consideradas diferentes
t.test(per$home_corners, emp$home_corners) # médias não podem ser consideradas diferentes
t.test(emp$home_corners, gan$home_corners) # médias não podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_clearances, gan$home_clearances) # médias podem ser consideradas diferentes
t.test(per$home_clearances, emp$home_clearances) # médias podem ser consideradas diferentes
t.test(emp$home_clearances, gan$home_clearances) # médias não podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_fouls_conceded, gan$home_fouls_conceded) # médias podem ser consideradas diferentes
t.test(per$home_fouls_conceded, emp$home_fouls_conceded) # médias podem ser consideradas diferentes
t.test(emp$home_fouls_conceded, gan$home_fouls_conceded) # médias não podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_clearances, gan$home_clearances) # médias não podem ser consideradas diferentes
t.test(per$home_clearances, emp$home_clearances) # médias não podem ser consideradas diferentes
t.test(emp$home_clearances, gan$home_clearances) # médias não podem ser consideradas diferentes
t.test(fem$prof_mat, masc$prof_mat) #PODE CONSIDERAR IGUAL
#teste de igualdade de médias
t.test(per$home_fouls_conceded, gan$home_fouls_conceded) # médias não podem ser consideradas diferentes
t.test(per$home_fouls_conceded, emp$home_fouls_conceded) # médias não podem ser consideradas diferentes
t.test(emp$home_fouls_conceded, gan$home_fouls_conceded) # médias podem ser consideradas diferentes
base2 |>
ggplot(mapping = aes(y = home_offsides ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou"))))  +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Impedimentos")+
theme_classic()
#verificando normalidade das classes
shapiro.test(per$home_offsides) #normal
shapiro.test(gan$home_offsides) #normal
shapiro.test(emp$home_offsides) #normal
#teste de igualdade de médias
t.test(per$home_offsides, gan$home_offsides) # médias podem ser consideradas diferentes
t.test(per$home_offsides, emp$home_offsides) # médias podem ser consideradas diferentes
t.test(emp$home_offsides, gan$home_offsides) # médias não podem ser consideradas diferentes
#verificando normalidade das classes
shapiro.test(per$home_passes) #normal
shapiro.test(gan$home_passes) #normal
shapiro.test(emp$home_passes) #normal
#teste de igualdade de médias
t.test(per$home_passes, gan$home_passes) # médias não podem ser consideradas diferentes
base2 |>
ggplot(mapping = aes(y = home_passes ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou"))))  +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Passes realizados")+
theme_classic()
library(ggplot2)
base2 |>
ggplot(mapping = aes(y = home_passes ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou"))))  +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Passes realizados")+
theme_classic()
t.test(per$home_passes, emp$home_passes) # médias não podem ser consideradas diferentes
t.test(emp$home_passes, gan$home_passes) # médias podem ser consideradas diferentes
t.test(emp$home_offsides, gan$home_offsides) # médias podem ser consideradas diferentes
t.test(per$home_offsides, emp$home_offsides) # médias não podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_offsides, gan$home_offsides) # médias não podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_offsides, gan$home_offsides) # médias não podem ser consideradas diferentes
t.test(per$home_offsides, emp$home_offsides) # médias não podem ser consideradas diferentes
t.test(emp$home_offsides, gan$home_offsides) # médias podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_fouls_conceded, gan$home_fouls_conceded) # médias podem ser consideradas diferentes
t.test(per$home_fouls_conceded, emp$home_fouls_conceded) # médias podem ser consideradas diferentes
t.test(emp$home_fouls_conceded, gan$home_fouls_conceded) # médias não podem ser consideradas diferentes
t.test(per$home_passes, emp$home_passes) # médias não podem ser consideradas diferentes
#teste de igualdade de médias
t.test(per$home_passes, gan$home_passes) # médias não podem ser consideradas diferentes
t.test(per$home_passes, emp$home_passes) # médias não podem ser consideradas diferentes
t.test(emp$home_passes, gan$home_passes) # médias podem ser consideradas diferentes
base2 |>
ggplot(mapping = aes(y = home_yellow_cards ,
x = factor(M_G, levels = c(0,1,2),
labels = c("Perdeu","Ganhou","Empatou"))))  +
geom_violin(fill = "red", alpha=0.5) +
geom_boxplot(fill="lightblue", alpha=0.2) +
labs(x = "Resultado",
y = "Cartões amarelos")+
theme_classic()
#verificando normalidade das classes
shapiro.test(per$home_yellow_cards) #normal
shapiro.test(gan$home_yellow_cards) #normal
shapiro.test(emp$home_yellow_cards) #normal
#teste de igualdade de médias
t.test(per$home_yellow_cards, gan$home_yellow_cards) # médias não podem ser consideradas diferentes
t.test(per$home_yellow_cards, emp$home_yellow_cards) # médias não podem ser consideradas diferentes
t.test(emp$home_yellow_cards, gan$home_yellow_cards) # médias não podem ser consideradas diferentes
t.test(fem$prof_mat, masc$prof_mat) #PODE CONSIDERAR IGUAL
ce = filter(base, local == "CE")
View(base)
ce = filter(base, local == "CE")
View(base)
ce = filter(base, local == "CE")
filter(base, local == "CE")
t.test(fem$prof_mat, masc$prof_mat) #PODE CONSIDERAR IGUAL
hist(gan$home_corners, bins=100)
hist(gan$home_corners, bins=50)
hist(gan$home_corners, bin=20)
emp |>
ggplot(aes(x=home_corners))+
geom_histogram(bins=50)
emp |>
ggplot(aes(x=home_corners))+
geom_histogram(bins=20)
emp |>
ggplot(aes(x=home_corners))+
geom_histogram(bins=10)
emp |>
ggplot(aes(x=home_corners))+
geom_histogram(bins=30)
gan |>
ggplot(aes(x=home_corners))+
geom_histogram(bins=30)
## Exemplo 1
amostra = rnorm(100,10,5)
y = quantile(amostra,seq(0.01,0.99,0.01))
x = qnorm(seq(0.01,0.99,0.01),10,5)
plot(x,y)
# qqnorm
qqnorm(amostra)
qqline(amostra, col = "red")
# qqplot
amostra2 = rexp(100,rate=3)
y = qexp(ppoints(100), rate = 3)
qqplot(y,amostra2)
# comparando amostras
amostra3 = rnorm(50,0,1)
amostra4 = rt(50,30)
qqplot(amostra3,amostra4)
qqline(amostra3,amostra4)
## Teste de Shapiro-Wilk
# apenas o teste
shapiro.test(amostra4)
## Efeito de amostras grandes
set.seed(85)
amostra5 = rnorm(5000,10,5)
shapiro.qqnorm(amostra5)
# com o grÃ¡fico qq-plot
library(epiDisplay)
shapiro.qqnorm(amostra5)
hist(amostra5)
## Teste de Kolmogorov Smirnov
ks.test(amostra5, "pnorm", mean=10, sd=5)
#pacote para teste de normalidade
library(epiDisplay)
#verificando normalidade das classes
shapiro.qqnorm(per$home_corners) #não é normal
shapiro.qqnorm(gan$home_corners) #não é normal
shapiro.qqnorm(emp$home_corners) #não é normal
#teste de igualdade de médias
wilcox.test(gan$home_corners, perd$home_corners, alternative = 'greater') # médias não podem ser consideradas diferentes
#teste de igualdade de médias
wilcox.test(gan$home_corners, per$home_corners, alternative = 'greater') # médias não podem ser consideradas diferentes
wilcox.test(emp$home_corners, per$home_corners, alternative = 'greater') # médias não podem ser consideradas diferentes
wilcox.test(emp$home_corners, gan$home_corners) # médias podem ser consideradas diferentes
#verificando normalidade das classes
shapiro.test(per$home_clearances) #não é normal
shapiro.test(gan$home_clearances) #não é normal
shapiro.test(emp$home_clearances) #não é normal
wilcox.test(emp$home_corners, per$home_corners, alternative = 'greater') # medianas não podem ser consideradas diferentes
wilcox.test(emp$home_corners, gan$home_corners) # medianas podem ser consideradas diferentes
#teste de igualdade de médias
wilcox.test(gan$home_clearances, per$home_clearances) # médias não podem ser consideradas diferentes
wilcox.test(emp$home_clearances, per$home_clearances) # medianas não podem ser consideradas diferentes
wilcox.test(gan$home_clearances, emp$home_clearances) # medianas podem ser consideradas diferentes
#teste de igualdade de médias
wilcox.test(gan$home_clearances, per$home_clearances, alternative = 'greater') # medianas não podem ser consideradas iguais
wilcox.test(emp$home_clearances, per$home_clearances, alternative = 'greater') # medianas não podem ser consideradas iguais
wilcox.test(gan$home_clearances, emp$home_clearances, alternative = 'greater') # medianas podem ser consideradas iguais
#teste de igualdade de médias
wilcox.test(per$home_fouls_conceded, gan$home_fouls_conceded, alternative = 'greater') # médias podem ser consideradas diferentes
wilcox.test(per$home_fouls_conceded, emp$home_fouls_conceded) # medianas podem ser consideradas diferentes
wilcox.test(emp$home_fouls_conceded, gan$home_fouls_conceded, alternative = 'greater') # médias não podem ser consideradas diferentes
#teste de igualdade de médias
wilcox.test(per$home_offsides, gan$home_offsides) # médias podem ser consideradas diferentes
wilcox.test(per$home_offsides, emp$home_offsides) # médias não podem ser consideradas diferentes
wilcox.test(emp$home_offsides, gan$home_offsides) # médias podem ser consideradas diferentes
#teste de igualdade de médias
wilcox.test(gan$home_passes, per$home_passes, alternative = 'greater') # médias não podem ser consideradas diferentes
wilcox.test(per$home_passes, emp$home_passes) # médias não podem ser consideradas diferentes
wilcox.test(per$home_passes, emp$home_passes) # médias podem ser consideradas iguais
wilcox.test(gan$home_passes, emp$home_passes, alternative = 'greater') # médias não podem ser consideradas diferentes
#teste de igualdade de médias
wilcox.test(per$home_yellow_cards, gan$home_yellow_cards) # médias podem ser consideradas diferentes
wilcox.test(per$home_yellow_cards, emp$home_yellow_cards) # medianas não podem ser consideradas diferentes
wilcox.test(emp$home_yellow_cards, gan$home_yellow_cards) # medianas podem ser consideradas diferentes
